{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>Содержание<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Загрузка-данных\" data-toc-modified-id=\"Загрузка-данных-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>Загрузка данных</a></span><ul class=\"toc-item\"><li><span><a href=\"#Вывод\" data-toc-modified-id=\"Вывод-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;</span>Вывод</a></span></li></ul></li><li><span><a href=\"#Умножение-матриц\" data-toc-modified-id=\"Умножение-матриц-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;</span>Умножение матриц</a></span></li><li><span><a href=\"#Алгоритм-преобразования\" data-toc-modified-id=\"Алгоритм-преобразования-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;</span>Алгоритм преобразования</a></span><ul class=\"toc-item\"><li><span><a href=\"#Вывод:\" data-toc-modified-id=\"Вывод:-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;</span>Вывод:</a></span></li></ul></li><li><span><a href=\"#Проверка-алгоритма\" data-toc-modified-id=\"Проверка-алгоритма-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;</span>Проверка алгоритма</a></span><ul class=\"toc-item\"><li><span><a href=\"#Вывод\" data-toc-modified-id=\"Вывод-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;</span>Вывод</a></span></li></ul></li><li><span><a href=\"#Вывод\" data-toc-modified-id=\"Вывод-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;</span>Вывод</a></span></li><li><span><a href=\"#Чек-лист-проверки\" data-toc-modified-id=\"Чек-лист-проверки-6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;</span>Чек-лист проверки</a></span></li></ul></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Защита персональных данных клиентов"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Вам нужно защитить данные клиентов страховой компании «Хоть потоп». Разработайте такой метод преобразования данных, чтобы по ним было сложно восстановить персональную информацию. Обоснуйте корректность его работы.\n",
    "\n",
    "Нужно защитить данные, чтобы при преобразовании качество моделей машинного обучения не ухудшилось. Подбирать наилучшую модель не требуется."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Загрузка данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# импортирую библиотеки\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# загружу данные\n",
    "data = pd.read_csv('/datasets/insurance.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# функция для просмотра данных\n",
    "def data_check(dataset):\n",
    "    print('Основная информация о таблице\\n')\n",
    "    display(dataset.info())\n",
    "    print('Информация о таблице по столбцам\\n')\n",
    "    display(dataset.head())\n",
    "    print('Основные значения данных\\n')\n",
    "    display(dataset.describe)\n",
    "    print('Количество дубликатов\\n')\n",
    "    display(dataset.duplicated().sum())\n",
    "    print('Количество уникальных значений\\n')\n",
    "    display(dataset.nunique())\n",
    "    print('Количество пропусков в каждом столбце\\n')\n",
    "    display(dataset.isna().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Основная информация о таблице\n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5000 entries, 0 to 4999\n",
      "Data columns (total 5 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Пол                5000 non-null   int64  \n",
      " 1   Возраст            5000 non-null   float64\n",
      " 2   Зарплата           5000 non-null   float64\n",
      " 3   Члены семьи        5000 non-null   int64  \n",
      " 4   Страховые выплаты  5000 non-null   int64  \n",
      "dtypes: float64(2), int64(3)\n",
      "memory usage: 195.4 KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Информация о таблице по столбцам\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Пол</th>\n",
       "      <th>Возраст</th>\n",
       "      <th>Зарплата</th>\n",
       "      <th>Члены семьи</th>\n",
       "      <th>Страховые выплаты</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>41.0</td>\n",
       "      <td>49600.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>38000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>21000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>41700.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>26100.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Пол  Возраст  Зарплата  Члены семьи  Страховые выплаты\n",
       "0    1     41.0   49600.0            1                  0\n",
       "1    0     46.0   38000.0            1                  1\n",
       "2    0     29.0   21000.0            0                  0\n",
       "3    0     21.0   41700.0            2                  0\n",
       "4    1     28.0   26100.0            0                  0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Основные значения данных\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<bound method NDFrame.describe of       Пол  Возраст  Зарплата  Члены семьи  Страховые выплаты\n",
       "0       1     41.0   49600.0            1                  0\n",
       "1       0     46.0   38000.0            1                  1\n",
       "2       0     29.0   21000.0            0                  0\n",
       "3       0     21.0   41700.0            2                  0\n",
       "4       1     28.0   26100.0            0                  0\n",
       "...   ...      ...       ...          ...                ...\n",
       "4995    0     28.0   35700.0            2                  0\n",
       "4996    0     34.0   52400.0            1                  0\n",
       "4997    0     20.0   33900.0            2                  0\n",
       "4998    1     22.0   32700.0            3                  0\n",
       "4999    1     28.0   40600.0            1                  0\n",
       "\n",
       "[5000 rows x 5 columns]>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Количество дубликатов\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "153"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Количество уникальных значений\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Пол                    2\n",
       "Возраст               46\n",
       "Зарплата             524\n",
       "Члены семьи            7\n",
       "Страховые выплаты      6\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Количество пропусков в каждом столбце\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Пол                  0\n",
       "Возраст              0\n",
       "Зарплата             0\n",
       "Члены семьи          0\n",
       "Страховые выплаты    0\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_check(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В датасете имеется 5 столбцов по 5000 строк в каждом. Преобразую тип данных столбцов \"возраст\" и \"зарплата\" в int"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Пол</th>\n",
       "      <th>Возраст</th>\n",
       "      <th>Зарплата</th>\n",
       "      <th>Члены семьи</th>\n",
       "      <th>Страховые выплаты</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.499000</td>\n",
       "      <td>30.952800</td>\n",
       "      <td>39916.360000</td>\n",
       "      <td>1.194200</td>\n",
       "      <td>0.148000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.500049</td>\n",
       "      <td>8.440807</td>\n",
       "      <td>9900.083569</td>\n",
       "      <td>1.091387</td>\n",
       "      <td>0.463183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>5300.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>33300.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>40200.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>46600.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>79000.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Пол      Возраст      Зарплата  Члены семьи  Страховые выплаты\n",
       "count  5000.000000  5000.000000   5000.000000  5000.000000        5000.000000\n",
       "mean      0.499000    30.952800  39916.360000     1.194200           0.148000\n",
       "std       0.500049     8.440807   9900.083569     1.091387           0.463183\n",
       "min       0.000000    18.000000   5300.000000     0.000000           0.000000\n",
       "25%       0.000000    24.000000  33300.000000     0.000000           0.000000\n",
       "50%       0.000000    30.000000  40200.000000     1.000000           0.000000\n",
       "75%       1.000000    37.000000  46600.000000     2.000000           0.000000\n",
       "max       1.000000    65.000000  79000.000000     6.000000           5.000000"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Визуализирую распределения по признакам."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def feature_plot(title, x_name):\n",
    "    sns.set()\n",
    "    fig, ax = plt.subplots(figsize=(15, 5))\n",
    "    sns.countplot(x=x_name, data=data, palette='coolwarm')\n",
    "    ax.set_title(title)\n",
    "    plt.ylabel('Количество')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "feature_plot('Распределение по полу', 'Пол')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "feature_plot('Распределение по возрасту', 'Возраст')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "feature_plot('Распределение по количеству членов в семье', 'Члены семьи')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "feature_plot('Распределение по страховым выплатам', 'Страховые выплаты')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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PZqnn36ayZMn06VLF06cOEFMTAz33nsvjRs3plevXjRq1IgHH3wwy5juv/9+DMPIiKto0aK0bduW5s2be/U3nT17lkcffTTLphAtWrQgOTmZp556igMHDlCgQAEaNGiQqaOitxo0aMCAAQN44oknOH36NNWrV880CsiFtm3bxsiRIzl58iSRkZHcddddGbXEI0aMICEhgdGjR1OnTh3atGlzUaVInTp1aNGiRUa5NGrU6Irx/fTTT0yYMIFXX301U7OS82666SYeeughunXrhslkyhixxBuXuz5EJH8wGefvoQaZpk2bMmXKFG655RaWLl3Ke++9x/Tp031y7LNnz1KnTh02bdqUqe2jiASHpk2b8tJLL2XZzvtyZs6cyYEDB3jiiScyLT906BBvvvkmY8eO9WWY+dr+/ftp1qwZmzdvzmgGIyKSG+SLzLB69ers2bOHNWvWZCz7/fff8fZ7hcvl4ujRoxnP582bxy233KLEWkQyCQsLIzIy8qLlFovlkh3nREQkuARdzfVLL73EwoULOXr0KIULFyYqKop58+bx+++/8+qrr3Lq1CmcTielS5dmypQpXiXI586d47777sPpdALpzUWGDRtGuXLlcvrPEZEAuNqaa/Ef1VyLSG4VdMm1iIiIiEigqF2DiIiIiIiPKLkWEREREfERJdciIiIiIj4SdL1ATpxIxuNRM/LzihaN5NgxTV7gCypL31FZ+obK0XdUlr6hcvQdlaVv5FQ5ms0mCheOyHJd0CXXHo+h5PpfVB6+o7L0HZWlb6gcfUdl6RsqR99RWfqGv8tRzUJERERERHxEybWIiIiIiI8ouRYRERER8REl1yIiIiIiPqLkWkRERETER5Rci4iIiIj4iJJrEREREREfUXItIiIiIuIjSq5FRERERHwk6GZoFBHJz8aNs2d7nyFDHDkQiYhI/qSaaxERERERH1FyLSIiIiLiI0quRURERER8RMm1iIiIiIiPKLkWEREREfERJdciIiIiIj6i5FpERERExEeUXIuIiIiI+IiSaxERERERH1FyLSIiIiLiI0quRURERER8xBroAERE5NLGjbNfcl1EBCQnX3r9hRwOOHnSRGoqFC5sEBkJJpOvohQRkfP8nlxPmjSJiRMnMmfOHG655ZZM61JSUnj22WfZvHkzFouFZ555hjvvvNPfIYqIBIWjR01s2GDh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QIciInlQtpPrTz/9lK+++ooFCxbw+eef50RMIhIktm83M326jQcfdFKunGqtJW+IjTXo08fB119b+eMPtZ4UkezJ9nSLJ0+e5OabbwbA7dYkECJyaS+9ZCc8HJ56SuMGS+40blx62+qICEhO/qedtccDISHQq1cYnTs7M+0zZIiuZxG5NK+S63379mU8NgyDffv2YRgGHo96/YtI1latsvDddzaGDUvjuutUay15S2go1K3rZtkyK3v3mrj+el3DIuIdr5LrFi1aYDKZMAwj4zmASd3+RSQLbjcMGxZCyZIeevdWLZ/kTdWru9mwwcKyZVbuu8+pkW5ExCteJddbt27N6ThEJIh89JGNzZstvP9+CuHhgY5G5OpYrdCwoYvvvrOxfbuZ8uV1t1ZErsyrnhoaFUREvHX8ePooC40auWjf3hXocESuScWKHq67zsPy5RbUzUhEvOFVcj1lypScjkNEgkRCQginT8NLL6XpNrrkeWYzNG7s5uRJM7//rpFDROTKvHqnON/WWkTkcjZtMvO//9n4z3+cVKyoW+gSHMqV81CqlIfVq6041IVARK7AqzbXqampNGnSJMt1S5cu9WE4IpJXGQY891wIUVEGQ4ZowhgJHiYT3H67i08/tbN+vSXQ4YhILudVcm232xk3blxOxyIiedisWVbWrLHy2mupREUFOhoR3ypRwuCWW9z8/LOFQ4dMFC+uO7oikjWvkmuLxUKdOnVyOhYRyaOSk2HkyBBuu81Njx7OK+8gkgfdfruLv/6yM3asnTff1N0ZEcmaV22uS5cundNxiEge9tZbdhITzbz8choW3TWXIBUVBTVquPnsM5umRReRS/Lq3eHLL7/E6cxcG+V0OnF42bPjxIkT9O7dm1atWtG+fXsef/xxjh8/ftF2KSkpDBw4kBYtWtC6dWt+/PFHr44vIoGza5eJyZPtdO7spG5djVUmwa1ePTeFCxuMHBmC+vqLSFa8Sq4feughNm/enGnZ5s2b6dWrl1cnMZlMPPzww3z//ffMmTOH0qVL89prr1203dSpU4mMjGTRokVMmTKF559/nuTkZK/OISL+Zxjw/POh2GwwfLhuk0vwCw2FwYMdLF9uZdEi3aYRkYt5lVxv27aNqlWrZlp22223eT1zY1RUFHXr1s14Xq1aNQ4ePHjRdgsWLKBr164AlClThsqVK/PTTz95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G4CdO3dy7NgxbrjhhtxbltlqoS1+9+KLLxqNGzc2KlSoYDRo0MBo27atYRiG8ddffxmdO3c2WrZsaXTu3NnYuXNnxj45sS6v2759u3HLLbcYLVu2NDp06GB06NDB6Nevn2EYhvHLL78Y7dq1M1q0aGE8+OCDGT3jc2pdXnfkyBEjPj7eaNeundGhQwejZ8+exqZNmwzD0HV5LS7skKdrMnv27t1rxMXFGe3atTPatm1rPPHEE0ZSUpJhGCrLq7F3717jvvvuM9q1a2d07NjRWLp0qWEYen1fjZYtWxrLli3LtEzlmH2zZ8822rVrZ7Rv395o3769sWjRIsMwcm9ZmgzDMHz05UJEREREJF9TsxARERERER9Rci0iIiIi4iNKrkVEREREfETJtYiIiIiIjyi5FhERERHxESXXIiIiIiI+ohkaRURyidOnTzNw4EC2bt1KWloahQoVomXLlgwcOJDQ0NBAhyciIl7QONciIrlESkoKmzdvpmrVqthsNo4fP87AgQOpXr06Tz75ZKDDExERL6jmWkQklwgLC6NWrVqZlpnNZgoXLsypU6cYMmQIv/32G263mxo1ajBq1CiKFy8OQM+ePalWrRqrV6/m77//pm7duowZM4aoqCj2799Ps2bNCA8Pzziuw+Ggb9++PPHEEwAXbZOamsro0aOJj4/n999/5+WXX2bnzp2EhobSsmVLhg4dit1up2/fvqxduxbDMEhJScnYv3379owePZp3332XL7/8kmPHjhEbG8uTTz5JixYt/FGcIiIBoTbXIiK5zKBBg6hevTr169enSJEiPPjgg3g8Hu655x5+/PFHfvzxR0JCQhg9enSm/WbNmsUrr7zCihUrsFqtvPTSS5nWr1u3jo0bN7Jx40batGmTad35m5jr169n48aNmZJ8s9nMs88+y5o1a/j8889ZvXo1n376KQBTpkxh48aNzJ07N9M5zsdWunRppk+fzi+//MLjjz/O008/zeHDh31bYCIiuYiSaxGRXOb1119nw4YNzJ8/n507dzJt2jQKFy5Mq1atCAsLIzIykkcffZR169Zl2i8uLo5bbrmF8PBwBgwYwHfffYfb7fbqnA6HA7PZjMViuWhd5cqVqVatGlarlVKlStG1a9eLzn0pbdq0ISYmBrPZTNu2bbnhhhv4/fffvdpXRCQvUrMQEZFcyGQyceONN9KnTx/effddunXrxpgxY1i+fDmnTp0CIDk5GbfbnZEQx8bGZuxfokQJnE4nJ06c8Op8p06domDBglmu27VrF2PHjmXTpk2kpKTgdrupVKmSV8edNWsW06ZN48CBAwCcO3fO65hERPIi1VyLiORibrcbs9nMBx98wK5du/jyyy/ZsGED06dPB/5pzgGQmJiY6bHNZqNw4cJenWf37t2ULVs2y3UjR46kXLlyfP/992zYsIEnn3wSb/rCHzhwgOeff54XXniBtWvXsn79em6++Wav4hERyauUXIuI5BJ//fUX77//fkbN7s6dO3nvvfdo164dycnJhISEULBgQU6ePMmkSZMu2v/bb7/lr7/+IiUlhQkTJtCqVassm3n8W2JiIh999BHNmjXLcn1ycjIRERFERESwc+dOPvvsM6/+npSUFEwmE0WKFAHg66+/ZseOHV7tKyKSVym5FhHJJQoUKMC6devo2LEjNWrUYMCAAfTo0YNevXrxwAMPkJaWRr169ejatSuNGze+aP+4uDiGDh1Kw4YNcTgcDBs2zKvz9urVizp16vDggw9muf6ZZ55h7ty51KhRgxdeeIG2bdt6ddybbrqJhx56iG7dutGgQQO2b99OjRo1vNpXRCSv0jjXIiJBoGfPnnTo0IH4+PhAhyIikq+p5lpERERExEeUXIuIiIiI+IiahYiIiIiI+IhqrkVEREREfETJtYiIiIiIjyi5FhERERHxESXXIiIiIiI+ouRaRERERMRHlFyLiIiIiPjI/wEKDJP7J8wOdQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(12, 5))\n",
    "sns.histplot(data['Зарплата'], color=\"blue\", label=\"100% Equities\", kde=True, stat=\"density\", linewidth=0)\n",
    "ax.set_title('Распределение по зарплате')\n",
    "plt.ylabel('Плотность частоты');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "corr = data.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Пол</th>\n",
       "      <th>Возраст</th>\n",
       "      <th>Зарплата</th>\n",
       "      <th>Члены семьи</th>\n",
       "      <th>Страховые выплаты</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Пол</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.002074</td>\n",
       "      <td>0.014910</td>\n",
       "      <td>-0.008991</td>\n",
       "      <td>0.010140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Возраст</th>\n",
       "      <td>0.002074</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.019093</td>\n",
       "      <td>-0.006692</td>\n",
       "      <td>0.651030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Зарплата</th>\n",
       "      <td>0.014910</td>\n",
       "      <td>-0.019093</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.030296</td>\n",
       "      <td>-0.014963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Члены семьи</th>\n",
       "      <td>-0.008991</td>\n",
       "      <td>-0.006692</td>\n",
       "      <td>-0.030296</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.036290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Страховые выплаты</th>\n",
       "      <td>0.010140</td>\n",
       "      <td>0.651030</td>\n",
       "      <td>-0.014963</td>\n",
       "      <td>-0.036290</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Пол   Возраст  Зарплата  Члены семьи  \\\n",
       "Пол                1.000000  0.002074  0.014910    -0.008991   \n",
       "Возраст            0.002074  1.000000 -0.019093    -0.006692   \n",
       "Зарплата           0.014910 -0.019093  1.000000    -0.030296   \n",
       "Члены семьи       -0.008991 -0.006692 -0.030296     1.000000   \n",
       "Страховые выплаты  0.010140  0.651030 -0.014963    -0.036290   \n",
       "\n",
       "                   Страховые выплаты  \n",
       "Пол                         0.010140  \n",
       "Возраст                     0.651030  \n",
       "Зарплата                   -0.014963  \n",
       "Члены семьи                -0.036290  \n",
       "Страховые выплаты           1.000000  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Возраст'] = data['Возраст'].astype('int')\n",
    "data['Зарплата'] = data['Зарплата'].astype('int')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Количество данных/признаков мало, поэтому дубликаты удалять не буду."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5000 entries, 0 to 4999\n",
      "Data columns (total 5 columns):\n",
      " #   Column             Non-Null Count  Dtype\n",
      "---  ------             --------------  -----\n",
      " 0   Пол                5000 non-null   int64\n",
      " 1   Возраст            5000 non-null   int64\n",
      " 2   Зарплата           5000 non-null   int64\n",
      " 3   Члены семьи        5000 non-null   int64\n",
      " 4   Страховые выплаты  5000 non-null   int64\n",
      "dtypes: int64(5)\n",
      "memory usage: 195.4 KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод\n",
    "\n",
    "Данные загружены корректно, аномалий, пропусков и артефактов нет. Имеется некая корреляция между страховыми выплатами и возрастом - 0.65103.\n",
    "- Целевой признак: Страховые выплаты. \n",
    "- Остальные признаки: Пол, Возраст, Зарплата, Члены семьи. \n",
    "- Среднее по данным: возраст около 30 лет, 1 член семьи, зарплата ~40000₽."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Умножение матриц"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В этом задании вы можете записывать формулы в *Jupyter Notebook.*\n",
    "\n",
    "Чтобы записать формулу внутри текста, окружите её символами доллара \\\\$; если снаружи —  двойными символами \\\\$\\\\$. Эти формулы записываются на языке вёрстки *LaTeX.* \n",
    "\n",
    "Для примера мы записали формулы линейной регрессии. Можете их скопировать и отредактировать, чтобы решить задачу.\n",
    "\n",
    "Работать в *LaTeX* необязательно."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Обозначения:\n",
    "\n",
    "- $X$ — матрица признаков (нулевой столбец состоит из единиц)\n",
    "\n",
    "- $y$ — вектор целевого признака\n",
    "\n",
    "- $P$ — матрица, на которую умножаются признаки\n",
    "\n",
    "- $w$ — вектор весов линейной регрессии (нулевой элемент равен сдвигу)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Предсказания:\n",
    "\n",
    "$$\n",
    "a = Xw\n",
    "$$\n",
    "\n",
    "Задача обучения:\n",
    "\n",
    "$$\n",
    "w = \\arg\\min_w MSE(Xw, y)\n",
    "$$\n",
    "\n",
    "Формула обучения:\n",
    "\n",
    "$$\n",
    "w = (X^T X)^{-1} X^T y\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вопрос задания**\n",
    "\n",
    "Признаки умножают на обратимую матрицу. Изменится ли качество линейной регрессии? (Её можно обучить заново.)\n",
    "<br>a. Изменится. Приведите примеры матриц.\n",
    "<br>b. Не изменится. Укажите, как связаны параметры линейной регрессии в исходной задаче и в преобразованной."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Обоснование:**\n",
    "\n",
    "Заменю матрицу $X$ на матрицу $Z$:\n",
    "$$\n",
    "Z=XP$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "здесь $P$  - обратимая матрица с некими значениями, на которую может быть умножена матрица $X$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Заменю $X$ на $Z$ и вычислю, чему будет равно предсказание и вектор весов.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$a_1 = Zw_1$$\n",
    "$$w_1 = {(Z^TZ)}^{-1}Z^Ty $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Теперь подставлю в предсказание правую часть уравнения вектора весов"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$a_1 = Z(Z^TZ)^{-1}Z^Ty$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Заменю Z согласно формуле $ Z = XP $"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$a_1 = XP((XP)^T(XP))^{-1}(XP)^Ty$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Из теории мне известно следующее свойство обратной матрицы:\n",
    "    $$(AB)^{-1} = A^{-1}B^{-1} $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$((XP)^T(XP))^{-1}$ буду раскрывать в два шага"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$a_1 = XP((XP)^T(XP))^{-1}(XP)^Ty = XP(XP)^{-1}((XP)^T)^{-1}(XP)^Ty = XPP^{-1}X^{-1}((XP)^{T})^{-1}(XP)^{T}y$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Присвою $PP^{-1} = E$ - единичная матрица. Для следующего шага воспользуюсь свойством транспонированной матрицы:\n",
    "    $$ (AB)^{T} = A^{T}B^{T}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Умножение на единичную матрицу ничего не изменяет. $((XP)^{T})^{-1}(XP)^{T}$ раскрою скобки в 3 шага:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$a_1 = XEX^{-1}((XP)^{T})^{-1}(XP)^{T}y = XX^{-1}(P^{T}X^{T})^{-1}P^{T}X^{T}y = XX^{-1}(X^{T})^{-1}(P^{T})^{-1}P^{T}X^{T}y$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$(P^{T})^{-1}P^{T} = E$ снова единичная матрица."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "И что же тогда получается"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$a_1 = XX^{-1}(X^{T})^{-1}EX^{T}y = X(X^{T}X)^{-1}X^{T}y = Xw = a$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Получается, что значение предсказания $a$ не меняется, если умножать матрицу признаков на обратимую матрицу."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Ответ:** не меняется"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Найду связь между параметрами линейной регрессии в исходной задаче и в преобразованной."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Подставлю значение новой матрицы $Z$ в формулу $w_1$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$w_1 = ((XP)^{T}XP)^{-1}(XP)^{T}y = (P^{T}X^{T}XP)^{-1}P^{T}X^{T}y = (P^{T}(X^{T}X)P)^{-1}P^{T}X^{T}y$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Раскрою скобки $(P^{T}(X^{T}X)P)^{-1}$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$w_1 = P^{-1}(X^{T}X)^{-1}(P^{T})^{-1}P^{T}X^{T}y$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Так как  по условию обратимая, то произведение  равно (единичная матрица) (о чём я уже указывал выше):\n",
    "$$w_1 = P^{-1}(X^{T}X)^{-1}EX^{T}y = P^{-1}(X^{T}X)^{-1}X^{T}y$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как видно что $(X^{T}X)^{-1}X^{T}y$ равно $w$ из условия."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В данном случае, параметры линейной регрессии в исходной задаче $w$ и в преобразованной $w_1$ связаны следующим образом:\n",
    "$$w_1 = P^{-1}w$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Алгоритм преобразования"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Алгоритм**\n",
    "\n",
    "В качестве алгоритма преобразования буду использовать матрицу со случайными величинами, у которой существует обратная к ней матрица."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Обоснование**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# целевой признак это Страховые выплаты\n",
    "target = data.loc[:, 'Страховые выплаты']\n",
    "features = data.drop(['Страховые выплаты'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# поделю признаки на test и train\n",
    "features_train, features_test, target_train, target_test = train_test_split(features, target, test_size=0.2, random_state=12345)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# преобразую выборки в матрицы\n",
    "matrix_train = features_train.values\n",
    "matrix_test = features_test.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4000, 4)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matrix_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000, 4)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matrix_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Так как признаков у основной матрицы 4, то сделаю рандомную обратимую матрицу 4 на 4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.5335267 , -2.56020938, -0.34986738,  0.52704177],\n",
       "       [ 1.7569955 ,  1.42809121, -0.43566738, -0.96086505],\n",
       "       [-0.18660931,  0.15617823,  1.11077756,  1.02672121],\n",
       "       [-0.77100498,  1.46437103,  1.36142852,  0.57970731]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_matrix = np.random.randn(4, 4)\n",
    "random_matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Необходимо проверить получившуюся матрицу на обратимость. Для этого умножу её на обратную ей матрицу. Согласно свойству матриц должна получиться единичная матрица - матрица, в которой по главной диаганали единицы, а остальное - нули."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.,  0., -0.,  0.],\n",
       "       [ 0.,  1., -0., -0.],\n",
       "       [-0., -0.,  1., -0.],\n",
       "       [-0., -0.,  0.,  1.]])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.round(random_matrix @ np.linalg.inv(random_matrix))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Полученная матрица является единичной, это значит, что рандомная матрица обратима."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Теперь перемножу тестовую и тренировочную матрицы на получившуюся рандомную обратимую матрицу"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_matrix_train = matrix_train @ random_matrix\n",
    "new_matrix_test = matrix_test @ random_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-7393.45282184,  6247.38404463, 44202.95641878, 40845.44614668],\n",
       "       [-6311.22521341,  5395.85883995, 37970.81600786, 35075.95771435],\n",
       "       [-9400.92586357,  7997.0222535 , 56408.90660437, 52115.30513031],\n",
       "       ...,\n",
       "       [-8269.63702638,  7038.62269725, 49634.90615461, 45856.14922866],\n",
       "       [-9313.55678138,  7861.80471855, 55645.81681456, 51419.91226188],\n",
       "       [-7580.277122  ,  6399.20543948, 45311.44678966, 41871.96880398]])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_matrix_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-7222.86643866,  6143.93538988, 43311.39355151, 40012.73735012],\n",
       "       [-7956.55369521,  6805.61493355, 47855.45234728, 44204.80017774],\n",
       "       [-7787.19579439,  6628.23875075, 46746.39440346, 43188.01611361],\n",
       "       ...,\n",
       "       [-3890.25513834,  3332.82323716, 23426.65506927, 21638.98085745],\n",
       "       [-7173.67557834,  6113.98271619, 43081.61398846, 39800.26995425],\n",
       "       [-8418.04705675,  7107.7923904 , 50311.79733434, 46491.45191937]])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_matrix_test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проведу проверку - изменились ли данные после этих манипуляций."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# перемножу признаки train на обратную рандомной матрицу\n",
    "\n",
    "decoded_matrix_train = new_matrix_train @ np.linalg.inv(random_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# воссоздам датафрейм из матрицы\n",
    "\n",
    "train_check = pd.DataFrame(decoded_matrix_train, columns=features_train.columns)\n",
    "train_check = np.round(train_check)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(      Пол  Возраст  Зарплата  Члены семьи\n",
       " 0    -0.0     20.0   39800.0          2.0\n",
       " 1     1.0     40.0   34200.0          0.0\n",
       " 2     1.0     45.0   50800.0          1.0\n",
       " 3     0.0     28.0   39100.0          2.0\n",
       " 4    -0.0     28.0   39000.0          1.0\n",
       " ...   ...      ...       ...          ...\n",
       " 3995  0.0     42.0   32100.0         -0.0\n",
       " 3996  0.0     28.0   22700.0          4.0\n",
       " 3997  1.0     41.0   44700.0          1.0\n",
       " 3998 -0.0     22.0   50100.0          4.0\n",
       " 3999  0.0     19.0   40800.0          0.0\n",
       " \n",
       " [4000 rows x 4 columns],\n",
       "       Пол  Возраст  Зарплата  Члены семьи\n",
       " 317     0       20     39800            2\n",
       " 4143    1       40     34200            0\n",
       " 4252    1       45     50800            1\n",
       " 710     0       28     39100            2\n",
       " 148     0       28     39000            1\n",
       " ...   ...      ...       ...          ...\n",
       " 3497    0       42     32100            0\n",
       " 3492    0       28     22700            4\n",
       " 2177    1       41     44700            1\n",
       " 3557    0       22     50100            4\n",
       " 4578    0       19     40800            0\n",
       " \n",
       " [4000 rows x 4 columns])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# собственно проверка\n",
    "train_check, features_train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод:\n",
    "То, что было в теоретической части доказано провёл отчасти в практической и как видно, данные не изменились, теперь можно приступить к проверке алгоритма."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Проверка алгоритма"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Создам модель для матриц. Используется линейная регрессия."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = LinearRegression()\n",
    "model.fit(matrix_train, target_train)\n",
    "predicted_norm = model.predict(features_test)\n",
    "norm_r2 = model.score(features_test, target_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.fit(new_matrix_train, target_train)\n",
    "predicted_encoded = model.predict(new_matrix_test)\n",
    "encoded_r2 = model.score(new_matrix_test, target_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 score не шифрованной матрицы:  0.41176839389109277\n",
      "R2 score шифрованной матрицы:  0.41176839389111375\n"
     ]
    }
   ],
   "source": [
    "# проверка двух моделей\n",
    "print('R2 score не шифрованной матрицы: ', norm_r2)\n",
    "print('R2 score шифрованной матрицы: ', encoded_r2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод\n",
    "\n",
    "Проверил качество моделей Линейной регрессии с помощью метрики R2 на данных - сначала на исходных (не шифрованных), затем умноженных на обратимую матрицу (шифрованные), размер которой равен числу признаков. Показатели метрики совпали. Могу сделать вывод, что алгоритм работает."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Вывод\n",
    "\n",
    "<br>На работу поступили чистые данные.\n",
    "<br>Предобработка не потребовалась.\n",
    "<br>Проверил теоретическую возможность, что если признаки умножить на обратимую матрицу, то изменится ли качество линейной регрессии. Теоретически нет.\n",
    "<br>Затем провел алгоритм такого преобразования и после проверил как это работает на моделях. Согласно проведённой проверки алгоритма с помощью метрики R2 на исходной не шифрованной выборке и на шифрованной матрице выяснилось, что качество линейной матрицы, сами данные тоже не изменяются, зато мы таким образом можем их защитить."
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 1059,
    "start_time": "2022-04-25T12:32:56.678Z"
   },
   {
    "duration": 57,
    "start_time": "2022-04-25T12:33:21.223Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-25T12:39:39.469Z"
   },
   {
    "duration": 27,
    "start_time": "2022-04-25T12:39:54.479Z"
   },
   {
    "duration": 135,
    "start_time": "2022-04-25T12:40:04.962Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-25T12:40:20.112Z"
   },
   {
    "duration": 108,
    "start_time": "2022-04-25T12:40:22.975Z"
   },
   {
    "duration": 4,
    "start_time": "2022-04-25T12:41:36.675Z"
   },
   {
    "duration": 21,
    "start_time": "2022-04-25T12:41:38.873Z"
   },
   {
    "duration": 106,
    "start_time": "2022-04-25T12:42:28.417Z"
   },
   {
    "duration": 133,
    "start_time": "2022-04-25T12:43:18.460Z"
   },
   {
    "duration": 4,
    "start_time": "2022-04-25T12:43:23.007Z"
   },
   {
    "duration": 24,
    "start_time": "2022-04-25T12:43:25.488Z"
   },
   {
    "duration": 4,
    "start_time": "2022-04-25T12:45:36.189Z"
   },
   {
    "duration": 36,
    "start_time": "2022-04-25T12:45:38.444Z"
   },
   {
    "duration": 3,
    "start_time": "2022-04-25T12:49:58.491Z"
   },
   {
    "duration": 26,
    "start_time": "2022-04-25T12:50:01.071Z"
   },
   {
    "duration": 9,
    "start_time": "2022-04-25T12:50:29.868Z"
   },
   {
    "duration": 7,
    "start_time": "2022-04-25T12:50:35.820Z"
   },
   {
    "duration": 7,
    "start_time": "2022-04-25T12:51:08.818Z"
   },
   {
    "duration": 3,
    "start_time": "2022-04-25T12:51:40.673Z"
   },
   {
    "duration": 11,
    "start_time": "2022-04-25T12:51:58.361Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-25T12:52:16.048Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-25T12:53:19.414Z"
   },
   {
    "duration": 30,
    "start_time": "2022-04-25T12:53:22.382Z"
   },
   {
    "duration": 124,
    "start_time": "2022-04-25T12:53:59.803Z"
   },
   {
    "duration": 4,
    "start_time": "2022-04-25T12:54:07.979Z"
   },
   {
    "duration": 28,
    "start_time": "2022-04-25T12:54:10.290Z"
   },
   {
    "duration": 3,
    "start_time": "2022-04-25T12:54:29.169Z"
   },
   {
    "duration": 30,
    "start_time": "2022-04-25T12:54:31.818Z"
   },
   {
    "duration": 4,
    "start_time": "2022-04-25T12:54:46.729Z"
   },
   {
    "duration": 18,
    "start_time": "2022-04-25T12:54:49.767Z"
   },
   {
    "duration": 17,
    "start_time": "2022-04-25T12:55:48.862Z"
   },
   {
    "duration": 4,
    "start_time": "2022-04-25T12:55:54.339Z"
   },
   {
    "duration": 32,
    "start_time": "2022-04-25T12:55:57.785Z"
   },
   {
    "duration": 4,
    "start_time": "2022-04-25T12:57:48.867Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-25T12:58:21.995Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-25T12:58:53.107Z"
   },
   {
    "duration": 10,
    "start_time": "2022-04-25T12:59:05.470Z"
   },
   {
    "duration": 10,
    "start_time": "2022-04-25T13:04:59.755Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-25T13:05:05.238Z"
   },
   {
    "duration": 3,
    "start_time": "2022-04-25T13:05:13.122Z"
   },
   {
    "duration": 25,
    "start_time": "2022-04-25T13:05:13.127Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-25T13:05:13.153Z"
   },
   {
    "duration": 41,
    "start_time": "2022-04-25T13:05:13.160Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-25T13:05:13.203Z"
   },
   {
    "duration": 48,
    "start_time": "2022-04-25T13:05:13.209Z"
   },
   {
    "duration": 959,
    "start_time": "2022-04-25T13:05:42.105Z"
   },
   {
    "duration": 17,
    "start_time": "2022-04-25T13:05:43.065Z"
   },
   {
    "duration": 4,
    "start_time": "2022-04-25T13:05:43.085Z"
   },
   {
    "duration": 39,
    "start_time": "2022-04-25T13:05:43.091Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-25T13:05:43.152Z"
   },
   {
    "duration": 14,
    "start_time": "2022-04-25T13:05:43.158Z"
   },
   {
    "duration": 106,
    "start_time": "2022-04-25T13:11:12.572Z"
   },
   {
    "duration": 2,
    "start_time": "2022-04-25T13:28:01.769Z"
   },
   {
    "duration": 97,
    "start_time": "2022-04-25T13:51:46.743Z"
   },
   {
    "duration": 76,
    "start_time": "2022-04-25T14:15:27.086Z"
   },
   {
    "duration": 76,
    "start_time": "2022-04-25T14:15:44.780Z"
   },
   {
    "duration": 93,
    "start_time": "2022-04-25T14:15:54.925Z"
   },
   {
    "duration": 78,
    "start_time": "2022-04-25T14:16:22.671Z"
   },
   {
    "duration": 1142,
    "start_time": "2022-04-25T14:16:31.501Z"
   },
   {
    "duration": 20,
    "start_time": "2022-04-25T14:16:32.645Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-25T14:16:32.667Z"
   },
   {
    "duration": 48,
    "start_time": "2022-04-25T14:16:32.674Z"
   },
   {
    "duration": 4,
    "start_time": "2022-04-25T14:16:32.723Z"
   },
   {
    "duration": 28,
    "start_time": "2022-04-25T14:16:32.728Z"
   },
   {
    "duration": 95,
    "start_time": "2022-04-25T14:16:32.758Z"
   },
   {
    "duration": 1466,
    "start_time": "2022-04-25T14:48:52.020Z"
   },
   {
    "duration": 16,
    "start_time": "2022-04-25T14:48:53.489Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-25T14:48:53.507Z"
   },
   {
    "duration": 66,
    "start_time": "2022-04-25T14:48:53.516Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-25T14:48:53.584Z"
   },
   {
    "duration": 16,
    "start_time": "2022-04-25T14:48:53.591Z"
   },
   {
    "duration": 88,
    "start_time": "2022-04-25T15:44:18.410Z"
   },
   {
    "duration": 1504,
    "start_time": "2022-04-25T15:50:50.427Z"
   },
   {
    "duration": 20,
    "start_time": "2022-04-25T15:50:51.933Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-25T15:50:51.955Z"
   },
   {
    "duration": 43,
    "start_time": "2022-04-25T15:50:51.963Z"
   },
   {
    "duration": 4,
    "start_time": "2022-04-25T15:50:52.008Z"
   },
   {
    "duration": 44,
    "start_time": "2022-04-25T15:50:52.014Z"
   },
   {
    "duration": 67,
    "start_time": "2022-04-26T07:56:29.394Z"
   },
   {
    "duration": 1547,
    "start_time": "2022-04-26T07:56:44.339Z"
   },
   {
    "duration": 15,
    "start_time": "2022-04-26T07:56:45.889Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-26T07:56:45.906Z"
   },
   {
    "duration": 70,
    "start_time": "2022-04-26T07:56:45.914Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-26T07:56:45.986Z"
   },
   {
    "duration": 18,
    "start_time": "2022-04-26T07:56:45.993Z"
   },
   {
    "duration": 182,
    "start_time": "2022-04-26T07:56:46.013Z"
   },
   {
    "duration": 10,
    "start_time": "2022-04-26T07:58:19.081Z"
   },
   {
    "duration": 7,
    "start_time": "2022-04-26T07:58:30.871Z"
   },
   {
    "duration": 8,
    "start_time": "2022-04-26T07:58:33.540Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-26T07:59:29.585Z"
   },
   {
    "duration": 7,
    "start_time": "2022-04-26T08:03:05.946Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-26T08:03:20.194Z"
   },
   {
    "duration": 7,
    "start_time": "2022-04-26T08:04:43.915Z"
   },
   {
    "duration": 13,
    "start_time": "2022-04-26T08:06:54.648Z"
   },
   {
    "duration": 4,
    "start_time": "2022-04-26T08:09:30.744Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-26T08:09:41.012Z"
   },
   {
    "duration": 11,
    "start_time": "2022-04-26T08:09:49.313Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-26T08:09:55.483Z"
   },
   {
    "duration": 4,
    "start_time": "2022-04-26T08:10:15.404Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-26T08:10:18.588Z"
   },
   {
    "duration": 3,
    "start_time": "2022-04-26T08:10:29.641Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-26T08:10:39.249Z"
   },
   {
    "duration": 4,
    "start_time": "2022-04-26T08:13:41.882Z"
   },
   {
    "duration": 7,
    "start_time": "2022-04-26T08:15:17.018Z"
   },
   {
    "duration": 13,
    "start_time": "2022-04-26T08:15:37.975Z"
   },
   {
    "duration": 14,
    "start_time": "2022-04-26T08:15:43.302Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-26T08:17:06.664Z"
   },
   {
    "duration": 15,
    "start_time": "2022-04-26T08:17:08.767Z"
   },
   {
    "duration": 10,
    "start_time": "2022-04-26T08:17:22.962Z"
   },
   {
    "duration": 14,
    "start_time": "2022-04-26T08:17:25.279Z"
   },
   {
    "duration": 16,
    "start_time": "2022-04-26T08:20:40.975Z"
   },
   {
    "duration": 7,
    "start_time": "2022-04-26T08:21:37.314Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-26T08:22:04.597Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-26T08:23:09.639Z"
   },
   {
    "duration": 1683,
    "start_time": "2022-04-26T08:31:50.847Z"
   },
   {
    "duration": 27,
    "start_time": "2022-04-26T08:31:52.533Z"
   },
   {
    "duration": 8,
    "start_time": "2022-04-26T08:31:52.562Z"
   },
   {
    "duration": 98,
    "start_time": "2022-04-26T08:31:52.573Z"
   },
   {
    "duration": 10,
    "start_time": "2022-04-26T08:31:52.676Z"
   },
   {
    "duration": 22,
    "start_time": "2022-04-26T08:31:52.689Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-26T08:31:52.713Z"
   },
   {
    "duration": 34,
    "start_time": "2022-04-26T08:31:52.722Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-26T08:31:52.758Z"
   },
   {
    "duration": 43,
    "start_time": "2022-04-26T08:31:52.765Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-26T08:31:52.810Z"
   },
   {
    "duration": 8,
    "start_time": "2022-04-26T08:31:52.818Z"
   },
   {
    "duration": 9,
    "start_time": "2022-04-26T08:31:52.828Z"
   },
   {
    "duration": 35,
    "start_time": "2022-04-26T08:31:52.866Z"
   },
   {
    "duration": 36,
    "start_time": "2022-04-26T08:31:52.960Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-26T08:31:52.999Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-26T08:31:53.007Z"
   },
   {
    "duration": 53,
    "start_time": "2022-04-26T08:31:53.016Z"
   },
   {
    "duration": 95,
    "start_time": "2022-04-26T08:31:53.076Z"
   },
   {
    "duration": 27,
    "start_time": "2022-04-26T08:31:53.175Z"
   },
   {
    "duration": 7,
    "start_time": "2022-04-26T08:31:53.204Z"
   },
   {
    "duration": 18,
    "start_time": "2022-04-26T08:31:53.213Z"
   },
   {
    "duration": 1321,
    "start_time": "2022-04-27T04:40:21.117Z"
   },
   {
    "duration": 19,
    "start_time": "2022-04-27T04:40:22.440Z"
   },
   {
    "duration": 4,
    "start_time": "2022-04-27T04:40:22.460Z"
   },
   {
    "duration": 44,
    "start_time": "2022-04-27T04:40:22.466Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-27T04:40:22.512Z"
   },
   {
    "duration": 11,
    "start_time": "2022-04-27T04:40:22.519Z"
   },
   {
    "duration": 4,
    "start_time": "2022-04-27T04:40:22.532Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-27T04:40:22.537Z"
   },
   {
    "duration": 4,
    "start_time": "2022-04-27T04:40:22.543Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-27T04:40:22.549Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-27T04:40:22.555Z"
   },
   {
    "duration": 40,
    "start_time": "2022-04-27T04:40:22.562Z"
   },
   {
    "duration": 18,
    "start_time": "2022-04-27T04:40:22.604Z"
   },
   {
    "duration": 10,
    "start_time": "2022-04-27T04:40:22.624Z"
   },
   {
    "duration": 69,
    "start_time": "2022-04-27T04:40:22.636Z"
   },
   {
    "duration": 14,
    "start_time": "2022-04-27T04:40:22.707Z"
   },
   {
    "duration": 79,
    "start_time": "2022-04-27T04:40:22.723Z"
   },
   {
    "duration": 21,
    "start_time": "2022-04-27T04:40:22.804Z"
   },
   {
    "duration": 80,
    "start_time": "2022-04-27T04:40:22.827Z"
   },
   {
    "duration": 10,
    "start_time": "2022-04-27T04:40:22.909Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-27T04:40:22.920Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-27T04:40:22.927Z"
   },
   {
    "duration": 2315,
    "start_time": "2022-04-27T06:20:47.905Z"
   },
   {
    "duration": 20,
    "start_time": "2022-04-27T06:20:50.223Z"
   },
   {
    "duration": 10,
    "start_time": "2022-04-27T06:20:50.245Z"
   },
   {
    "duration": 73,
    "start_time": "2022-04-27T06:20:50.258Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-27T06:20:50.352Z"
   },
   {
    "duration": 10,
    "start_time": "2022-04-27T06:20:50.360Z"
   },
   {
    "duration": 22,
    "start_time": "2022-04-27T06:20:50.372Z"
   },
   {
    "duration": 9,
    "start_time": "2022-04-27T06:20:50.396Z"
   },
   {
    "duration": 11,
    "start_time": "2022-04-27T06:20:50.408Z"
   },
   {
    "duration": 29,
    "start_time": "2022-04-27T06:20:50.423Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-27T06:20:50.454Z"
   },
   {
    "duration": 10,
    "start_time": "2022-04-27T06:20:50.461Z"
   },
   {
    "duration": 10,
    "start_time": "2022-04-27T06:20:50.473Z"
   },
   {
    "duration": 67,
    "start_time": "2022-04-27T06:20:50.485Z"
   },
   {
    "duration": 97,
    "start_time": "2022-04-27T06:20:50.556Z"
   },
   {
    "duration": 9,
    "start_time": "2022-04-27T06:20:50.655Z"
   },
   {
    "duration": 9,
    "start_time": "2022-04-27T06:20:50.666Z"
   },
   {
    "duration": 75,
    "start_time": "2022-04-27T06:20:50.677Z"
   },
   {
    "duration": 11,
    "start_time": "2022-04-27T06:20:50.756Z"
   },
   {
    "duration": 92,
    "start_time": "2022-04-27T06:20:50.771Z"
   },
   {
    "duration": 86,
    "start_time": "2022-04-27T06:20:50.866Z"
   },
   {
    "duration": 110,
    "start_time": "2022-04-27T06:20:50.955Z"
   },
   {
    "duration": 17,
    "start_time": "2022-04-27T06:20:51.067Z"
   },
   {
    "duration": 281,
    "start_time": "2022-04-27T06:22:02.041Z"
   },
   {
    "duration": 139,
    "start_time": "2022-04-27T06:22:25.483Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-27T06:22:34.168Z"
   },
   {
    "duration": 272,
    "start_time": "2022-04-27T06:22:36.668Z"
   },
   {
    "duration": 249,
    "start_time": "2022-04-27T06:22:54.687Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-27T06:23:19.979Z"
   },
   {
    "duration": 219,
    "start_time": "2022-04-27T06:23:22.123Z"
   },
   {
    "duration": 231,
    "start_time": "2022-04-27T06:23:27.972Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-27T06:23:36.121Z"
   },
   {
    "duration": 236,
    "start_time": "2022-04-27T06:23:38.887Z"
   },
   {
    "duration": 424,
    "start_time": "2022-04-27T06:25:46.843Z"
   },
   {
    "duration": 1446,
    "start_time": "2022-04-27T06:26:48.485Z"
   },
   {
    "duration": 31855,
    "start_time": "2022-04-27T06:28:40.341Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-27T06:29:30.744Z"
   },
   {
    "duration": 224,
    "start_time": "2022-04-27T06:29:33.487Z"
   },
   {
    "duration": 1077,
    "start_time": "2022-04-27T06:29:36.260Z"
   },
   {
    "duration": 36882,
    "start_time": "2022-04-27T06:29:41.910Z"
   },
   {
    "duration": 325,
    "start_time": "2022-04-27T06:30:18.795Z"
   },
   {
    "duration": 324,
    "start_time": "2022-04-27T06:31:21.105Z"
   },
   {
    "duration": 763,
    "start_time": "2022-04-27T06:32:13.100Z"
   },
   {
    "duration": 432,
    "start_time": "2022-04-27T06:33:01.632Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-27T06:38:35.634Z"
   },
   {
    "duration": 511,
    "start_time": "2022-04-27T06:38:41.367Z"
   },
   {
    "duration": 666,
    "start_time": "2022-04-27T06:42:25.988Z"
   },
   {
    "duration": 291,
    "start_time": "2022-04-27T06:44:17.055Z"
   },
   {
    "duration": 310,
    "start_time": "2022-04-27T06:44:38.388Z"
   },
   {
    "duration": 492,
    "start_time": "2022-04-27T06:45:32.610Z"
   },
   {
    "duration": 601,
    "start_time": "2022-04-27T06:45:45.929Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-27T06:45:57.619Z"
   },
   {
    "duration": 482,
    "start_time": "2022-04-27T06:46:03.305Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-27T06:46:50.771Z"
   },
   {
    "duration": 28,
    "start_time": "2022-04-27T06:46:56.838Z"
   },
   {
    "duration": 814,
    "start_time": "2022-04-27T06:47:12.297Z"
   },
   {
    "duration": 14,
    "start_time": "2022-04-27T06:48:42.836Z"
   },
   {
    "duration": 13,
    "start_time": "2022-04-27T06:54:44.245Z"
   },
   {
    "duration": 13,
    "start_time": "2022-04-27T06:55:13.457Z"
   },
   {
    "duration": 15,
    "start_time": "2022-04-27T06:55:43.367Z"
   },
   {
    "duration": 12,
    "start_time": "2022-04-27T06:55:58.286Z"
   },
   {
    "duration": 42,
    "start_time": "2022-04-27T06:56:05.201Z"
   },
   {
    "duration": 128,
    "start_time": "2022-04-27T06:57:40.913Z"
   },
   {
    "duration": 128,
    "start_time": "2022-04-27T07:12:29.198Z"
   },
   {
    "duration": 2519,
    "start_time": "2022-04-27T07:20:13.506Z"
   },
   {
    "duration": 27,
    "start_time": "2022-04-27T07:20:16.028Z"
   },
   {
    "duration": 8,
    "start_time": "2022-04-27T07:20:16.058Z"
   },
   {
    "duration": 110,
    "start_time": "2022-04-27T07:20:16.071Z"
   },
   {
    "duration": 69,
    "start_time": "2022-04-27T07:20:16.184Z"
   },
   {
    "duration": 8,
    "start_time": "2022-04-27T07:20:16.256Z"
   },
   {
    "duration": 342,
    "start_time": "2022-04-27T07:20:16.268Z"
   },
   {
    "duration": 1601,
    "start_time": "2022-04-27T07:20:16.612Z"
   },
   {
    "duration": 386,
    "start_time": "2022-04-27T07:20:18.217Z"
   },
   {
    "duration": 324,
    "start_time": "2022-04-27T07:20:18.609Z"
   },
   {
    "duration": 849,
    "start_time": "2022-04-27T07:20:18.935Z"
   },
   {
    "duration": 7,
    "start_time": "2022-04-27T07:20:19.788Z"
   },
   {
    "duration": 25,
    "start_time": "2022-04-27T07:20:19.798Z"
   },
   {
    "duration": 540,
    "start_time": "2022-04-27T07:20:19.826Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-27T07:20:20.369Z"
   },
   {
    "duration": 30,
    "start_time": "2022-04-27T07:20:20.378Z"
   },
   {
    "duration": 10,
    "start_time": "2022-04-27T07:20:20.411Z"
   },
   {
    "duration": 47,
    "start_time": "2022-04-27T07:20:20.424Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-27T07:20:20.474Z"
   },
   {
    "duration": 15,
    "start_time": "2022-04-27T07:20:20.482Z"
   },
   {
    "duration": 7,
    "start_time": "2022-04-27T07:20:20.501Z"
   },
   {
    "duration": 15,
    "start_time": "2022-04-27T07:20:20.512Z"
   },
   {
    "duration": 34,
    "start_time": "2022-04-27T07:20:20.530Z"
   },
   {
    "duration": 7,
    "start_time": "2022-04-27T07:20:20.568Z"
   },
   {
    "duration": 26,
    "start_time": "2022-04-27T07:20:20.652Z"
   },
   {
    "duration": 81,
    "start_time": "2022-04-27T07:20:20.683Z"
   },
   {
    "duration": 14,
    "start_time": "2022-04-27T07:20:20.768Z"
   },
   {
    "duration": 65,
    "start_time": "2022-04-27T07:20:20.790Z"
   },
   {
    "duration": 99,
    "start_time": "2022-04-27T07:20:20.864Z"
   },
   {
    "duration": 19,
    "start_time": "2022-04-27T07:20:20.966Z"
   },
   {
    "duration": 10,
    "start_time": "2022-04-27T07:20:20.988Z"
   },
   {
    "duration": 16,
    "start_time": "2022-04-27T07:20:21.001Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-27T07:21:16.053Z"
   },
   {
    "duration": 53,
    "start_time": "2022-04-27T07:21:21.002Z"
   },
   {
    "duration": 2869,
    "start_time": "2022-04-27T07:21:44.314Z"
   },
   {
    "duration": 21,
    "start_time": "2022-04-27T07:21:47.187Z"
   },
   {
    "duration": 9,
    "start_time": "2022-04-27T07:21:47.211Z"
   },
   {
    "duration": 126,
    "start_time": "2022-04-27T07:21:47.225Z"
   },
   {
    "duration": 36,
    "start_time": "2022-04-27T07:21:47.354Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-27T07:21:47.393Z"
   },
   {
    "duration": 365,
    "start_time": "2022-04-27T07:21:47.402Z"
   },
   {
    "duration": 942,
    "start_time": "2022-04-27T07:21:47.770Z"
   },
   {
    "duration": 309,
    "start_time": "2022-04-27T07:21:48.715Z"
   },
   {
    "duration": 284,
    "start_time": "2022-04-27T07:21:49.028Z"
   },
   {
    "duration": 556,
    "start_time": "2022-04-27T07:21:49.315Z"
   },
   {
    "duration": 5,
    "start_time": "2022-04-27T07:21:49.873Z"
   },
   {
    "duration": 18,
    "start_time": "2022-04-27T07:21:49.880Z"
   },
   {
    "duration": 492,
    "start_time": "2022-04-27T07:21:49.900Z"
   },
   {
    "duration": 7,
    "start_time": "2022-04-27T07:21:50.394Z"
   },
   {
    "duration": 18,
    "start_time": "2022-04-27T07:21:50.404Z"
   },
   {
    "duration": 29,
    "start_time": "2022-04-27T07:21:50.425Z"
   },
   {
    "duration": 9,
    "start_time": "2022-04-27T07:21:50.456Z"
   },
   {
    "duration": 10,
    "start_time": "2022-04-27T07:21:50.468Z"
   },
   {
    "duration": 12,
    "start_time": "2022-04-27T07:21:50.481Z"
   },
   {
    "duration": 11,
    "start_time": "2022-04-27T07:21:50.495Z"
   },
   {
    "duration": 46,
    "start_time": "2022-04-27T07:21:50.508Z"
   },
   {
    "duration": 14,
    "start_time": "2022-04-27T07:21:50.557Z"
   },
   {
    "duration": 80,
    "start_time": "2022-04-27T07:21:50.575Z"
   },
   {
    "duration": 8,
    "start_time": "2022-04-27T07:21:50.660Z"
   },
   {
    "duration": 85,
    "start_time": "2022-04-27T07:21:50.671Z"
   },
   {
    "duration": 8,
    "start_time": "2022-04-27T07:21:50.759Z"
   },
   {
    "duration": 84,
    "start_time": "2022-04-27T07:21:50.773Z"
   },
   {
    "duration": 107,
    "start_time": "2022-04-27T07:21:50.861Z"
   },
   {
    "duration": 21,
    "start_time": "2022-04-27T07:21:50.970Z"
   },
   {
    "duration": 8,
    "start_time": "2022-04-27T07:21:50.994Z"
   },
   {
    "duration": 6,
    "start_time": "2022-04-27T07:21:51.006Z"
   },
   {
    "duration": 448,
    "start_time": "2022-04-27T08:31:05.320Z"
   },
   {
    "duration": 17,
    "start_time": "2022-04-27T08:31:05.770Z"
   },
   {
    "duration": 4,
    "start_time": "2022-04-27T08:31:05.788Z"
   },
   {
    "duration": 100,
    "start_time": "2022-04-27T08:31:05.794Z"
   },
   {
    "duration": 8,
    "start_time": "2022-04-27T08:31:39.298Z"
   },
   {
    "duration": 54,
    "start_time": "2022-04-27T08:31:40.986Z"
   },
   {
    "duration": 226,
    "start_time": "2022-04-27T08:32:37.742Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Содержание",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
